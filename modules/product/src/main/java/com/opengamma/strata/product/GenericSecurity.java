/**
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.product;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.basics.currency.CurrencyAmount;
import com.opengamma.strata.basics.market.ReferenceData;
import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.product.bond.BondFutureOptionSecurity;
import com.opengamma.strata.product.bond.FixedCouponBondSecurity;
import com.opengamma.strata.product.equity.EquitySecurity;
import com.opengamma.strata.product.index.IborFutureSecurity;

/**
 * A generic security, defined in terms of the value of each tick.
 * <p>
 * In most cases, applications will choose to represent information about securities
 * using the relevant type, such as {@link EquitySecurity}, {@link FixedCouponBondSecurity},
 * {@link BondFutureOptionSecurity} or {@link IborFutureSecurity}.
 * Sometimes however, it can be useful to store minimal information about the security,
 * expressing just the tick size and tick value.
 */
@BeanDefinition
public final class GenericSecurity
    implements Security, ImmutableBean, Serializable {

  /**
   * The standard security information.
   * <p>
   * This includes the security identifier.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final SecurityInfo securityInfo;
  /**
   * The size of each tick.
   * <p>
   * The tick size is defined as a positive decimal number.
   * If the tick size is 1/32, the tick size would be 0.03125.
   */
  @PropertyDefinition(validate = "ArgChecker.notNegativeOrZero")
  private final double tickSize;
  /**
   * The monetary value of one tick.
   * <p>
   * When the price changes by one tick, this amount is gained/lost.
   */
  @PropertyDefinition(validate = "notNull")
  private final CurrencyAmount tickValue;

  //-------------------------------------------------------------------------
  /**
   * Obtains an instance from identifier, tick size and tick value.
   * 
   * @param securityId  the security identifier
   * @param tickSize  the size of each tick
   * @param tickValue  the value of each tick
   * @return the security
   */
  public static GenericSecurity of(
      SecurityId securityId,
      double tickSize,
      CurrencyAmount tickValue) {

    return new GenericSecurity(SecurityInfo.of(securityId), tickSize, tickValue);
  }

  /**
   * Obtains an instance from security information, tick size and tick value.
   * 
   * @param securityInfo  the security information
   * @param tickSize  the size of each tick
   * @param tickValue  the value of each tick
   * @return the security
   */
  public static GenericSecurity of(
      SecurityInfo securityInfo,
      double tickSize,
      CurrencyAmount tickValue) {

    return new GenericSecurity(securityInfo, tickSize, tickValue);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency that the security is traded in.
   * <p>
   * The currency is derived from the tick value.
   * 
   * @return the currency
   */
  @Override
  public Currency getCurrency() {
    return tickValue.getCurrency();
  }

  //-------------------------------------------------------------------------
  @Override
  public GenericSecurityTrade createTrade(TradeInfo tradeInfo, long quantity, double tradePrice, ReferenceData refData) {
    return new GenericSecurityTrade(tradeInfo, this, quantity, tradePrice);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code GenericSecurity}.
   * @return the meta-bean, not null
   */
  public static GenericSecurity.Meta meta() {
    return GenericSecurity.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(GenericSecurity.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static GenericSecurity.Builder builder() {
    return new GenericSecurity.Builder();
  }

  private GenericSecurity(
      SecurityInfo securityInfo,
      double tickSize,
      CurrencyAmount tickValue) {
    JodaBeanUtils.notNull(securityInfo, "securityInfo");
    ArgChecker.notNegativeOrZero(tickSize, "tickSize");
    JodaBeanUtils.notNull(tickValue, "tickValue");
    this.securityInfo = securityInfo;
    this.tickSize = tickSize;
    this.tickValue = tickValue;
  }

  @Override
  public GenericSecurity.Meta metaBean() {
    return GenericSecurity.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the standard security information.
   * <p>
   * This includes the security identifier.
   * @return the value of the property, not null
   */
  @Override
  public SecurityInfo getSecurityInfo() {
    return securityInfo;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the size of each tick.
   * <p>
   * The tick size is defined as a positive decimal number.
   * If the tick size is 1/32, the tick size would be 0.03125.
   * @return the value of the property
   */
  public double getTickSize() {
    return tickSize;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the monetary value of one tick.
   * <p>
   * When the price changes by one tick, this amount is gained/lost.
   * @return the value of the property, not null
   */
  public CurrencyAmount getTickValue() {
    return tickValue;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      GenericSecurity other = (GenericSecurity) obj;
      return JodaBeanUtils.equal(securityInfo, other.securityInfo) &&
          JodaBeanUtils.equal(tickSize, other.tickSize) &&
          JodaBeanUtils.equal(tickValue, other.tickValue);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(securityInfo);
    hash = hash * 31 + JodaBeanUtils.hashCode(tickSize);
    hash = hash * 31 + JodaBeanUtils.hashCode(tickValue);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("GenericSecurity{");
    buf.append("securityInfo").append('=').append(securityInfo).append(',').append(' ');
    buf.append("tickSize").append('=').append(tickSize).append(',').append(' ');
    buf.append("tickValue").append('=').append(JodaBeanUtils.toString(tickValue));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code GenericSecurity}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code securityInfo} property.
     */
    private final MetaProperty<SecurityInfo> securityInfo = DirectMetaProperty.ofImmutable(
        this, "securityInfo", GenericSecurity.class, SecurityInfo.class);
    /**
     * The meta-property for the {@code tickSize} property.
     */
    private final MetaProperty<Double> tickSize = DirectMetaProperty.ofImmutable(
        this, "tickSize", GenericSecurity.class, Double.TYPE);
    /**
     * The meta-property for the {@code tickValue} property.
     */
    private final MetaProperty<CurrencyAmount> tickValue = DirectMetaProperty.ofImmutable(
        this, "tickValue", GenericSecurity.class, CurrencyAmount.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "securityInfo",
        "tickSize",
        "tickValue");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 807907342:  // securityInfo
          return securityInfo;
        case 1936822078:  // tickSize
          return tickSize;
        case -85538348:  // tickValue
          return tickValue;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public GenericSecurity.Builder builder() {
      return new GenericSecurity.Builder();
    }

    @Override
    public Class<? extends GenericSecurity> beanType() {
      return GenericSecurity.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code securityInfo} property.
     * @return the meta-property, not null
     */
    public MetaProperty<SecurityInfo> securityInfo() {
      return securityInfo;
    }

    /**
     * The meta-property for the {@code tickSize} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> tickSize() {
      return tickSize;
    }

    /**
     * The meta-property for the {@code tickValue} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurrencyAmount> tickValue() {
      return tickValue;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 807907342:  // securityInfo
          return ((GenericSecurity) bean).getSecurityInfo();
        case 1936822078:  // tickSize
          return ((GenericSecurity) bean).getTickSize();
        case -85538348:  // tickValue
          return ((GenericSecurity) bean).getTickValue();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code GenericSecurity}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<GenericSecurity> {

    private SecurityInfo securityInfo;
    private double tickSize;
    private CurrencyAmount tickValue;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(GenericSecurity beanToCopy) {
      this.securityInfo = beanToCopy.getSecurityInfo();
      this.tickSize = beanToCopy.getTickSize();
      this.tickValue = beanToCopy.getTickValue();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 807907342:  // securityInfo
          return securityInfo;
        case 1936822078:  // tickSize
          return tickSize;
        case -85538348:  // tickValue
          return tickValue;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 807907342:  // securityInfo
          this.securityInfo = (SecurityInfo) newValue;
          break;
        case 1936822078:  // tickSize
          this.tickSize = (Double) newValue;
          break;
        case -85538348:  // tickValue
          this.tickValue = (CurrencyAmount) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public GenericSecurity build() {
      return new GenericSecurity(
          securityInfo,
          tickSize,
          tickValue);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the standard security information.
     * <p>
     * This includes the security identifier.
     * @param securityInfo  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder securityInfo(SecurityInfo securityInfo) {
      JodaBeanUtils.notNull(securityInfo, "securityInfo");
      this.securityInfo = securityInfo;
      return this;
    }

    /**
     * Sets the size of each tick.
     * <p>
     * The tick size is defined as a positive decimal number.
     * If the tick size is 1/32, the tick size would be 0.03125.
     * @param tickSize  the new value
     * @return this, for chaining, not null
     */
    public Builder tickSize(double tickSize) {
      ArgChecker.notNegativeOrZero(tickSize, "tickSize");
      this.tickSize = tickSize;
      return this;
    }

    /**
     * Sets the monetary value of one tick.
     * <p>
     * When the price changes by one tick, this amount is gained/lost.
     * @param tickValue  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder tickValue(CurrencyAmount tickValue) {
      JodaBeanUtils.notNull(tickValue, "tickValue");
      this.tickValue = tickValue;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("GenericSecurity.Builder{");
      buf.append("securityInfo").append('=').append(JodaBeanUtils.toString(securityInfo)).append(',').append(' ');
      buf.append("tickSize").append('=').append(JodaBeanUtils.toString(tickSize)).append(',').append(' ');
      buf.append("tickValue").append('=').append(JodaBeanUtils.toString(tickValue));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
