/**
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.product.rate;

import java.io.Serializable;
import java.time.YearMonth;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableSet;
import com.opengamma.strata.basics.index.Index;
import com.opengamma.strata.basics.index.PriceIndex;
import com.opengamma.strata.collect.ArgChecker;

/**
 * Defines the observation of inflation figures from a price index.
 * <p>
 * A typical application of this rate observation is payments of a capital indexed bond, 
 * where the reference start month is start month of the bond rather than start month of the payment period. 
 * <p>
 * A price index is typically published monthly and has a delay before publication.
 * The rate observed by this instance will be based on the start index value and the observation relative to the end month.
 */
@BeanDefinition
public final class InflationBondMonthlyRateObservation
    implements RateObservation, ImmutableBean, Serializable {

  /**
   * The index of prices.
   * <p>
   * The pay-off is computed based on this index
   */
  @PropertyDefinition(validate = "notNull")
  private final PriceIndex index;
  /**
   * The start index value. 
   * <p>
   * The published index value of the start month. 
   */
  @PropertyDefinition(validate = "ArgChecker.notNegativeOrZero")
  private final double startIndexValue;
  /**
   * The reference month for the index relative to the end date of the period.
   * <p>
   * The reference month is typically three months before the end date of the period.
   */
  @PropertyDefinition(validate = "notNull")
  private final YearMonth referenceEndMonth;

  //-------------------------------------------------------------------------
  /**
   * Creates an {@code InflationBondMonthlyRateObservation} from an index, start index value and reference end month.
   * 
   * @param index  the index
   * @param startIndexValue  the start index value
   * @param referenceEndMonth  the reference end month
   * @return the inflation rate observation
   */
  public static InflationBondMonthlyRateObservation of(
      PriceIndex index,
      double startIndexValue,
      YearMonth referenceEndMonth) {

    return InflationBondMonthlyRateObservation.builder()
        .index(index)
        .startIndexValue(startIndexValue)
        .referenceEndMonth(referenceEndMonth)
        .build();
  }

  //-------------------------------------------------------------------------
  @Override
  public void collectIndices(ImmutableSet.Builder<Index> builder) {
    builder.add(index);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code InflationBondMonthlyRateObservation}.
   * @return the meta-bean, not null
   */
  public static InflationBondMonthlyRateObservation.Meta meta() {
    return InflationBondMonthlyRateObservation.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(InflationBondMonthlyRateObservation.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static InflationBondMonthlyRateObservation.Builder builder() {
    return new InflationBondMonthlyRateObservation.Builder();
  }

  private InflationBondMonthlyRateObservation(
      PriceIndex index,
      double startIndexValue,
      YearMonth referenceEndMonth) {
    JodaBeanUtils.notNull(index, "index");
    ArgChecker.notNegativeOrZero(startIndexValue, "startIndexValue");
    JodaBeanUtils.notNull(referenceEndMonth, "referenceEndMonth");
    this.index = index;
    this.startIndexValue = startIndexValue;
    this.referenceEndMonth = referenceEndMonth;
  }

  @Override
  public InflationBondMonthlyRateObservation.Meta metaBean() {
    return InflationBondMonthlyRateObservation.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the index of prices.
   * <p>
   * The pay-off is computed based on this index
   * @return the value of the property, not null
   */
  public PriceIndex getIndex() {
    return index;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the start index value.
   * <p>
   * The published index value of the start month.
   * @return the value of the property
   */
  public double getStartIndexValue() {
    return startIndexValue;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the reference month for the index relative to the end date of the period.
   * <p>
   * The reference month is typically three months before the end date of the period.
   * @return the value of the property, not null
   */
  public YearMonth getReferenceEndMonth() {
    return referenceEndMonth;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      InflationBondMonthlyRateObservation other = (InflationBondMonthlyRateObservation) obj;
      return JodaBeanUtils.equal(index, other.index) &&
          JodaBeanUtils.equal(startIndexValue, other.startIndexValue) &&
          JodaBeanUtils.equal(referenceEndMonth, other.referenceEndMonth);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(index);
    hash = hash * 31 + JodaBeanUtils.hashCode(startIndexValue);
    hash = hash * 31 + JodaBeanUtils.hashCode(referenceEndMonth);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("InflationBondMonthlyRateObservation{");
    buf.append("index").append('=').append(index).append(',').append(' ');
    buf.append("startIndexValue").append('=').append(startIndexValue).append(',').append(' ');
    buf.append("referenceEndMonth").append('=').append(JodaBeanUtils.toString(referenceEndMonth));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code InflationBondMonthlyRateObservation}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code index} property.
     */
    private final MetaProperty<PriceIndex> index = DirectMetaProperty.ofImmutable(
        this, "index", InflationBondMonthlyRateObservation.class, PriceIndex.class);
    /**
     * The meta-property for the {@code startIndexValue} property.
     */
    private final MetaProperty<Double> startIndexValue = DirectMetaProperty.ofImmutable(
        this, "startIndexValue", InflationBondMonthlyRateObservation.class, Double.TYPE);
    /**
     * The meta-property for the {@code referenceEndMonth} property.
     */
    private final MetaProperty<YearMonth> referenceEndMonth = DirectMetaProperty.ofImmutable(
        this, "referenceEndMonth", InflationBondMonthlyRateObservation.class, YearMonth.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "index",
        "startIndexValue",
        "referenceEndMonth");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          return index;
        case -1656407615:  // startIndexValue
          return startIndexValue;
        case 1861034704:  // referenceEndMonth
          return referenceEndMonth;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public InflationBondMonthlyRateObservation.Builder builder() {
      return new InflationBondMonthlyRateObservation.Builder();
    }

    @Override
    public Class<? extends InflationBondMonthlyRateObservation> beanType() {
      return InflationBondMonthlyRateObservation.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code index} property.
     * @return the meta-property, not null
     */
    public MetaProperty<PriceIndex> index() {
      return index;
    }

    /**
     * The meta-property for the {@code startIndexValue} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> startIndexValue() {
      return startIndexValue;
    }

    /**
     * The meta-property for the {@code referenceEndMonth} property.
     * @return the meta-property, not null
     */
    public MetaProperty<YearMonth> referenceEndMonth() {
      return referenceEndMonth;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          return ((InflationBondMonthlyRateObservation) bean).getIndex();
        case -1656407615:  // startIndexValue
          return ((InflationBondMonthlyRateObservation) bean).getStartIndexValue();
        case 1861034704:  // referenceEndMonth
          return ((InflationBondMonthlyRateObservation) bean).getReferenceEndMonth();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code InflationBondMonthlyRateObservation}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<InflationBondMonthlyRateObservation> {

    private PriceIndex index;
    private double startIndexValue;
    private YearMonth referenceEndMonth;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(InflationBondMonthlyRateObservation beanToCopy) {
      this.index = beanToCopy.getIndex();
      this.startIndexValue = beanToCopy.getStartIndexValue();
      this.referenceEndMonth = beanToCopy.getReferenceEndMonth();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          return index;
        case -1656407615:  // startIndexValue
          return startIndexValue;
        case 1861034704:  // referenceEndMonth
          return referenceEndMonth;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 100346066:  // index
          this.index = (PriceIndex) newValue;
          break;
        case -1656407615:  // startIndexValue
          this.startIndexValue = (Double) newValue;
          break;
        case 1861034704:  // referenceEndMonth
          this.referenceEndMonth = (YearMonth) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public InflationBondMonthlyRateObservation build() {
      return new InflationBondMonthlyRateObservation(
          index,
          startIndexValue,
          referenceEndMonth);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the index of prices.
     * <p>
     * The pay-off is computed based on this index
     * @param index  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder index(PriceIndex index) {
      JodaBeanUtils.notNull(index, "index");
      this.index = index;
      return this;
    }

    /**
     * Sets the start index value.
     * <p>
     * The published index value of the start month.
     * @param startIndexValue  the new value
     * @return this, for chaining, not null
     */
    public Builder startIndexValue(double startIndexValue) {
      ArgChecker.notNegativeOrZero(startIndexValue, "startIndexValue");
      this.startIndexValue = startIndexValue;
      return this;
    }

    /**
     * Sets the reference month for the index relative to the end date of the period.
     * <p>
     * The reference month is typically three months before the end date of the period.
     * @param referenceEndMonth  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder referenceEndMonth(YearMonth referenceEndMonth) {
      JodaBeanUtils.notNull(referenceEndMonth, "referenceEndMonth");
      this.referenceEndMonth = referenceEndMonth;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("InflationBondMonthlyRateObservation.Builder{");
      buf.append("index").append('=').append(JodaBeanUtils.toString(index)).append(',').append(' ');
      buf.append("startIndexValue").append('=').append(JodaBeanUtils.toString(startIndexValue)).append(',').append(' ');
      buf.append("referenceEndMonth").append('=').append(JodaBeanUtils.toString(referenceEndMonth));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
