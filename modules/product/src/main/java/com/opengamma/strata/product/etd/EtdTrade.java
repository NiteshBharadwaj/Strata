/**
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.product.etd;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableDefaults;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.market.ReferenceData;
import com.opengamma.strata.basics.market.Resolvable;
import com.opengamma.strata.product.TradeInfo;
import com.opengamma.strata.product.index.IborFutureTrade;

/**
 * A trade in a generic exchange-traded derivative contract (ETD).
 * <p>
 * A trade in an underlying {@link Etd}.
 * <p>
 * An ETD is a security that is based on the value of another asset and that is traded on an exchange.
 * Derivatives are available on many different kinds of asset, such as equities, bonds, indices,
 * interest rates, currency and weather.
 * <p>
 * This trade implementation is defined to have a {@link SecurityId} that resolves
 * to any instance of {@link Etd}, not just those mapped to an instance of {@link GenericEtd}.
 * The method {@link Etd#toGenericEtd()} is then used to produce a {@link ResolvedGenericEtdTrade}
 * suitable for mark-to-market pricing.
 * For mark-to-model pricing, use the ETD specific trade type, such as {@link IborFutureTrade}.
 */
@BeanDefinition
public final class EtdTrade
    implements SecurityTrade, Resolvable<ResolvedGenericEtdTrade>, ImmutableBean, Serializable {

  /**
   * The additional trade information, defaulted to an empty instance.
   * <p>
   * This allows additional information to be attached to the trade.
   */
  @PropertyDefinition(overrideGet = true)
  private final TradeInfo tradeInfo;
  /**
   * The identifier of the security.
   * <p>
   * This uniquely identifies a security within the system, resolved from {@link ReferenceData}.
   * The identifier must resolve to an instance of {@link Etd}.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final SecurityId securityId;
  /**
   * The quantity, indicating the number of contracts in the trade.
   * <p>
   * This will be positive if buying and negative if selling.
   */
  @PropertyDefinition
  private final long quantity;
  /**
   * The initial price of the ETD, represented in decimal form.
   * <p>
   * This is the price agreed when the trade occurred.
   * This must be represented in decimal form.
   * <p>
   * No indication is provided as to the meaning of one unit of this price.
   * It may be an amount in a currency, a percentage or something else entirely.
   */
  @PropertyDefinition
  private final double initialPrice;

  //-------------------------------------------------------------------------
  @ImmutableDefaults
  private static void applyDefaults(Builder builder) {
    builder.tradeInfo = TradeInfo.EMPTY;
  }

  //-------------------------------------------------------------------------
  @Override
  public ResolvedGenericEtdTrade resolve(ReferenceData refData) {
    return new ResolvedGenericEtdTrade(tradeInfo, resolveSecurity(refData).toGenericEtd(), quantity, initialPrice);
  }

  @Override
  public Etd resolveSecurity(ReferenceData refData) {
    return securityId.resolve(refData, Etd.class);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code EtdTrade}.
   * @return the meta-bean, not null
   */
  public static EtdTrade.Meta meta() {
    return EtdTrade.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(EtdTrade.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static EtdTrade.Builder builder() {
    return new EtdTrade.Builder();
  }

  private EtdTrade(
      TradeInfo tradeInfo,
      SecurityId securityId,
      long quantity,
      double initialPrice) {
    JodaBeanUtils.notNull(securityId, "securityId");
    this.tradeInfo = tradeInfo;
    this.securityId = securityId;
    this.quantity = quantity;
    this.initialPrice = initialPrice;
  }

  @Override
  public EtdTrade.Meta metaBean() {
    return EtdTrade.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the additional trade information, defaulted to an empty instance.
   * <p>
   * This allows additional information to be attached to the trade.
   * @return the value of the property
   */
  @Override
  public TradeInfo getTradeInfo() {
    return tradeInfo;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the identifier of the security.
   * <p>
   * This uniquely identifies a security within the system, resolved from {@link ReferenceData}.
   * The identifier must resolve to an instance of {@link Etd}.
   * @return the value of the property, not null
   */
  @Override
  public SecurityId getSecurityId() {
    return securityId;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the quantity, indicating the number of contracts in the trade.
   * <p>
   * This will be positive if buying and negative if selling.
   * @return the value of the property
   */
  public long getQuantity() {
    return quantity;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the initial price of the ETD, represented in decimal form.
   * <p>
   * This is the price agreed when the trade occurred.
   * This must be represented in decimal form.
   * <p>
   * No indication is provided as to the meaning of one unit of this price.
   * It may be an amount in a currency, a percentage or something else entirely.
   * @return the value of the property
   */
  public double getInitialPrice() {
    return initialPrice;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      EtdTrade other = (EtdTrade) obj;
      return JodaBeanUtils.equal(tradeInfo, other.tradeInfo) &&
          JodaBeanUtils.equal(securityId, other.securityId) &&
          (quantity == other.quantity) &&
          JodaBeanUtils.equal(initialPrice, other.initialPrice);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(tradeInfo);
    hash = hash * 31 + JodaBeanUtils.hashCode(securityId);
    hash = hash * 31 + JodaBeanUtils.hashCode(quantity);
    hash = hash * 31 + JodaBeanUtils.hashCode(initialPrice);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("EtdTrade{");
    buf.append("tradeInfo").append('=').append(tradeInfo).append(',').append(' ');
    buf.append("securityId").append('=').append(securityId).append(',').append(' ');
    buf.append("quantity").append('=').append(quantity).append(',').append(' ');
    buf.append("initialPrice").append('=').append(JodaBeanUtils.toString(initialPrice));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code EtdTrade}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code tradeInfo} property.
     */
    private final MetaProperty<TradeInfo> tradeInfo = DirectMetaProperty.ofImmutable(
        this, "tradeInfo", EtdTrade.class, TradeInfo.class);
    /**
     * The meta-property for the {@code securityId} property.
     */
    private final MetaProperty<SecurityId> securityId = DirectMetaProperty.ofImmutable(
        this, "securityId", EtdTrade.class, SecurityId.class);
    /**
     * The meta-property for the {@code quantity} property.
     */
    private final MetaProperty<Long> quantity = DirectMetaProperty.ofImmutable(
        this, "quantity", EtdTrade.class, Long.TYPE);
    /**
     * The meta-property for the {@code initialPrice} property.
     */
    private final MetaProperty<Double> initialPrice = DirectMetaProperty.ofImmutable(
        this, "initialPrice", EtdTrade.class, Double.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "tradeInfo",
        "securityId",
        "quantity",
        "initialPrice");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 752580658:  // tradeInfo
          return tradeInfo;
        case 1574023291:  // securityId
          return securityId;
        case -1285004149:  // quantity
          return quantity;
        case -423406491:  // initialPrice
          return initialPrice;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public EtdTrade.Builder builder() {
      return new EtdTrade.Builder();
    }

    @Override
    public Class<? extends EtdTrade> beanType() {
      return EtdTrade.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code tradeInfo} property.
     * @return the meta-property, not null
     */
    public MetaProperty<TradeInfo> tradeInfo() {
      return tradeInfo;
    }

    /**
     * The meta-property for the {@code securityId} property.
     * @return the meta-property, not null
     */
    public MetaProperty<SecurityId> securityId() {
      return securityId;
    }

    /**
     * The meta-property for the {@code quantity} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Long> quantity() {
      return quantity;
    }

    /**
     * The meta-property for the {@code initialPrice} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> initialPrice() {
      return initialPrice;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 752580658:  // tradeInfo
          return ((EtdTrade) bean).getTradeInfo();
        case 1574023291:  // securityId
          return ((EtdTrade) bean).getSecurityId();
        case -1285004149:  // quantity
          return ((EtdTrade) bean).getQuantity();
        case -423406491:  // initialPrice
          return ((EtdTrade) bean).getInitialPrice();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code EtdTrade}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<EtdTrade> {

    private TradeInfo tradeInfo;
    private SecurityId securityId;
    private long quantity;
    private double initialPrice;

    /**
     * Restricted constructor.
     */
    private Builder() {
      applyDefaults(this);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(EtdTrade beanToCopy) {
      this.tradeInfo = beanToCopy.getTradeInfo();
      this.securityId = beanToCopy.getSecurityId();
      this.quantity = beanToCopy.getQuantity();
      this.initialPrice = beanToCopy.getInitialPrice();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 752580658:  // tradeInfo
          return tradeInfo;
        case 1574023291:  // securityId
          return securityId;
        case -1285004149:  // quantity
          return quantity;
        case -423406491:  // initialPrice
          return initialPrice;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 752580658:  // tradeInfo
          this.tradeInfo = (TradeInfo) newValue;
          break;
        case 1574023291:  // securityId
          this.securityId = (SecurityId) newValue;
          break;
        case -1285004149:  // quantity
          this.quantity = (Long) newValue;
          break;
        case -423406491:  // initialPrice
          this.initialPrice = (Double) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public EtdTrade build() {
      return new EtdTrade(
          tradeInfo,
          securityId,
          quantity,
          initialPrice);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the additional trade information, defaulted to an empty instance.
     * <p>
     * This allows additional information to be attached to the trade.
     * @param tradeInfo  the new value
     * @return this, for chaining, not null
     */
    public Builder tradeInfo(TradeInfo tradeInfo) {
      this.tradeInfo = tradeInfo;
      return this;
    }

    /**
     * Sets the identifier of the security.
     * <p>
     * This uniquely identifies a security within the system, resolved from {@link ReferenceData}.
     * The identifier must resolve to an instance of {@link Etd}.
     * @param securityId  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder securityId(SecurityId securityId) {
      JodaBeanUtils.notNull(securityId, "securityId");
      this.securityId = securityId;
      return this;
    }

    /**
     * Sets the quantity, indicating the number of contracts in the trade.
     * <p>
     * This will be positive if buying and negative if selling.
     * @param quantity  the new value
     * @return this, for chaining, not null
     */
    public Builder quantity(long quantity) {
      this.quantity = quantity;
      return this;
    }

    /**
     * Sets the initial price of the ETD, represented in decimal form.
     * <p>
     * This is the price agreed when the trade occurred.
     * This must be represented in decimal form.
     * <p>
     * No indication is provided as to the meaning of one unit of this price.
     * It may be an amount in a currency, a percentage or something else entirely.
     * @param initialPrice  the new value
     * @return this, for chaining, not null
     */
    public Builder initialPrice(double initialPrice) {
      this.initialPrice = initialPrice;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("EtdTrade.Builder{");
      buf.append("tradeInfo").append('=').append(JodaBeanUtils.toString(tradeInfo)).append(',').append(' ');
      buf.append("securityId").append('=').append(JodaBeanUtils.toString(securityId)).append(',').append(' ');
      buf.append("quantity").append('=').append(JodaBeanUtils.toString(quantity)).append(',').append(' ');
      buf.append("initialPrice").append('=').append(JodaBeanUtils.toString(initialPrice));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
