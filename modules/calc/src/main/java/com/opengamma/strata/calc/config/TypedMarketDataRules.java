/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.calc.config;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableSet;
import com.opengamma.strata.basics.CalculationTarget;
import com.opengamma.strata.calc.marketdata.mapping.MarketDataMappings;

/**
 * Implementation of a market data rules that matches a target based on its type.
 * <p>
 * The rules match if the target is an instance of any of the types in the set of target types.
 */
@BeanDefinition(builderScope = "private")
public final class TypedMarketDataRules implements MarketDataRules, ImmutableBean {

  /**
   * The market data mappings used by targets matching this rule set.
   */
  @PropertyDefinition(validate = "notNull", get = "private")
  private final MarketDataMappings mappings;
  /**
   * The types of calculation target to which this set of rules applies.
   * <p>
   * The rules apply if the target is an instance of any type in this list.
   */
  @PropertyDefinition(validate = "notNull", get = "private")
  private final ImmutableSet<Class<? extends CalculationTarget>> targetTypes;

  //-------------------------------------------------------------------------
  /**
   * Obtains an instance returning the specified mappings for any of the target types.
   * <p>
   * If the target is an instance of one of the target types, the mappings will be returned.
   * 
   * @param mappings  the market data mappings used by targets matching this rule
   * @param targetTypes  the types of calculation target to which this rule applies
   * @return a rule which returns the mappings for any target that is an instance of one of the target types
   */
  @SafeVarargs
  public static TypedMarketDataRules of(
      MarketDataMappings mappings,
      Class<? extends CalculationTarget>... targetTypes) {

    return new TypedMarketDataRules(mappings, ImmutableSet.copyOf(targetTypes));
  }

  /**
   * Obtains an instance returning the specified mappings for any of the target types.
   * <p>
   * If the target is an instance of one of the target types, the mappings will be returned.
   * 
   * @param mappings  the market data mappings used by targets matching this rule
   * @param targetTypes  the types of calculation target to which this rule applies
   * @return a rule which returns the mappings for any target that is an instance of one of the target types
   */
  public static TypedMarketDataRules of(
      MarketDataMappings mappings,
      List<Class<? extends CalculationTarget>> targetTypes) {

    return new TypedMarketDataRules(mappings, ImmutableSet.copyOf(targetTypes));
  }

  //-------------------------------------------------------------------------
  @Override
  public Optional<MarketDataMappings> mappings(CalculationTarget target) {
    boolean ruleMatches = targetTypes.stream().anyMatch(targetType -> targetType.isInstance(target));
    return ruleMatches ? Optional.of(mappings) : Optional.empty();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code TypedMarketDataRules}.
   * @return the meta-bean, not null
   */
  public static TypedMarketDataRules.Meta meta() {
    return TypedMarketDataRules.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(TypedMarketDataRules.Meta.INSTANCE);
  }

  private TypedMarketDataRules(
      MarketDataMappings mappings,
      Set<Class<? extends CalculationTarget>> targetTypes) {
    JodaBeanUtils.notNull(mappings, "mappings");
    JodaBeanUtils.notNull(targetTypes, "targetTypes");
    this.mappings = mappings;
    this.targetTypes = ImmutableSet.copyOf(targetTypes);
  }

  @Override
  public TypedMarketDataRules.Meta metaBean() {
    return TypedMarketDataRules.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the market data mappings used by targets matching this rule set.
   * @return the value of the property, not null
   */
  private MarketDataMappings getMappings() {
    return mappings;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the types of calculation target to which this set of rules applies.
   * <p>
   * The rules apply if the target is an instance of any type in this list.
   * @return the value of the property, not null
   */
  private ImmutableSet<Class<? extends CalculationTarget>> getTargetTypes() {
    return targetTypes;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      TypedMarketDataRules other = (TypedMarketDataRules) obj;
      return JodaBeanUtils.equal(mappings, other.mappings) &&
          JodaBeanUtils.equal(targetTypes, other.targetTypes);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(mappings);
    hash = hash * 31 + JodaBeanUtils.hashCode(targetTypes);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("TypedMarketDataRules{");
    buf.append("mappings").append('=').append(mappings).append(',').append(' ');
    buf.append("targetTypes").append('=').append(JodaBeanUtils.toString(targetTypes));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code TypedMarketDataRules}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code mappings} property.
     */
    private final MetaProperty<MarketDataMappings> mappings = DirectMetaProperty.ofImmutable(
        this, "mappings", TypedMarketDataRules.class, MarketDataMappings.class);
    /**
     * The meta-property for the {@code targetTypes} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableSet<Class<? extends CalculationTarget>>> targetTypes = DirectMetaProperty.ofImmutable(
        this, "targetTypes", TypedMarketDataRules.class, (Class) ImmutableSet.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "mappings",
        "targetTypes");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 194445669:  // mappings
          return mappings;
        case -2094577304:  // targetTypes
          return targetTypes;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends TypedMarketDataRules> builder() {
      return new TypedMarketDataRules.Builder();
    }

    @Override
    public Class<? extends TypedMarketDataRules> beanType() {
      return TypedMarketDataRules.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code mappings} property.
     * @return the meta-property, not null
     */
    public MetaProperty<MarketDataMappings> mappings() {
      return mappings;
    }

    /**
     * The meta-property for the {@code targetTypes} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableSet<Class<? extends CalculationTarget>>> targetTypes() {
      return targetTypes;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 194445669:  // mappings
          return ((TypedMarketDataRules) bean).getMappings();
        case -2094577304:  // targetTypes
          return ((TypedMarketDataRules) bean).getTargetTypes();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code TypedMarketDataRules}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<TypedMarketDataRules> {

    private MarketDataMappings mappings;
    private Set<Class<? extends CalculationTarget>> targetTypes = ImmutableSet.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 194445669:  // mappings
          return mappings;
        case -2094577304:  // targetTypes
          return targetTypes;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 194445669:  // mappings
          this.mappings = (MarketDataMappings) newValue;
          break;
        case -2094577304:  // targetTypes
          this.targetTypes = (Set<Class<? extends CalculationTarget>>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public TypedMarketDataRules build() {
      return new TypedMarketDataRules(
          mappings,
          targetTypes);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("TypedMarketDataRules.Builder{");
      buf.append("mappings").append('=').append(JodaBeanUtils.toString(mappings)).append(',').append(' ');
      buf.append("targetTypes").append('=').append(JodaBeanUtils.toString(targetTypes));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
